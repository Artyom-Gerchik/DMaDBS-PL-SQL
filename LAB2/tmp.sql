CREATE OR REPLACE TRIGGER STUDENTS_INSERT
    BEFORE INSERT
    ON STUDENTS
    FOR EACH ROW
DECLARE
    AMOUNT NUMBER;
    MAX_ID NUMBER;
BEGIN
    SELECT COUNT(*) INTO AMOUNT FROM STUDENTS;
    IF AMOUNT = 0 THEN
        :NEW.ID := 1;
    ELSE
        SELECT MAX(ID) INTO MAX_ID FROM STUDENTS;
        IF :NEW.ID > MAX_ID THEN
            :NEW.ID := MAX_ID + 1;
        ELSIF :NEW.ID > 0 THEN
            SELECT COUNT(*) INTO AMOUNT FROM STUDENTS WHERE ID = :NEW.ID;
            IF AMOUNT > 0 THEN
                :NEW.ID := MAX_ID + 1; -- ELSE :NEW.ID NOT CHANGING
            END IF;
        ELSE
            :NEW.ID := MAX_ID + 1;
        END IF;
    END IF;
END STUDENTS_INSERT;

CREATE OR REPLACE TRIGGER GROUPS_INSERT
    BEFORE INSERT
    ON GROUPS
    FOR EACH ROW
DECLARE
    NAME_EXCEPTION EXCEPTION;
    PRAGMA EXCEPTION_INIT (NAME_EXCEPTION, -20111);

    AMOUNT NUMBER;
    MAX_ID NUMBER;
BEGIN
    SELECT COUNT(*) INTO AMOUNT FROM GROUPS WHERE NAME = :NEW.NAME;
    IF AMOUNT = 0 THEN
        SELECT COUNT(*) INTO AMOUNT FROM GROUPS;
        IF AMOUNT = 0 THEN
            :NEW.ID := 1;
        ELSE
            SELECT MAX(ID) INTO MAX_ID FROM GROUPS;
            IF :NEW.ID > MAX_ID THEN
                :NEW.ID := MAX_ID + 1;
            ELSIF :NEW.ID > 0 THEN
                SELECT COUNT(*) INTO AMOUNT FROM GROUPS WHERE ID = :NEW.ID;
                IF AMOUNT > 0 THEN
                    :NEW.ID := MAX_ID + 1; -- ELSE :NEW.ID NOT CHANGING
                END IF;
            ELSE
                :NEW.ID := MAX_ID + 1;
            END IF;
        END IF;
    ELSE
        RAISE_APPLICATION_ERROR(-20111, 'GROUP WITH THE SAME NAME ALREADY EXISTS');
    END IF;

END GROUPS_INSERT;

CREATE OR REPLACE TRIGGER GROUPS_DELETE
    BEFORE DELETE
    ON GROUPS
    FOR EACH ROW
BEGIN
    DELETE FROM STUDENTS WHERE GROUP_ID = :OLD.ID;
END;

CREATE OR REPLACE TRIGGER STUDENTS_LOGS
    BEFORE INSERT OR UPDATE OR DELETE
    ON STUDENTS
    FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION; -- FOR ROLLBACKS ETC
BEGIN
    IF INSERTING THEN
        INSERT INTO STUDENTS_LOGS VALUES (:NEW.ID, NULL, :NEW.NAME, NULL, :NEW.GROUP_ID, 'INSERT', SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO STUDENTS_LOGS
        VALUES (:OLD.ID, :OLD.NAME, :NEW.NAME, :OLD.GROUP_ID, :NEW.GROUP_ID, 'UPDATE', SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO STUDENTS_LOGS VALUES (:OLD.ID, :OLD.NAME, NULL, :OLD.GROUP_ID, NULL, 'DELETE', SYSDATE);
    END IF;
    COMMIT;
END STUDENTS_LOGS;

CREATE OR REPLACE PROCEDURE RESTORE_STUDENTS_BY_LOGS(FROM_THIS_TIME DATE, TO_THIS_TIME DATE) IS
    CURSOR RECORDS_IN_LOGS IS
        SELECT *
        FROM STUDENTS_LOGS
        WHERE TIME_OF_COMMAND BETWEEN FROM_THIS_TIME AND TO_THIS_TIME
        ORDER BY TIME_OF_COMMAND DESC;
BEGIN
    EXECUTE IMMEDIATE 'ALTER TRIGGER STUDENTS_INSERT DISABLE';
    EXECUTE IMMEDIATE 'ALTER TRIGGER STUDENTS_LOGS DISABLE';

    FOR ONE_RECORD IN RECORDS_IN_LOGS
        LOOP
            IF ONE_RECORD.COMMAND = 'INSERT' THEN
                DELETE FROM STUDENTS WHERE ID = ONE_RECORD.STUDENT_ID;
            ELSIF ONE_RECORD.COMMAND = 'UPDATE' THEN
                UPDATE STUDENTS
                SET NAME     = ONE_RECORD.OLD_NAME,
                    GROUP_ID = ONE_RECORD.OLD_GROUP_ID
                WHERE ID = ONE_RECORD.STUDENT_ID;
            ELSIF ONE_RECORD.COMMAND = 'DELETE' THEN
                INSERT INTO STUDENTS VALUES (ONE_RECORD.STUDENT_ID, ONE_RECORD.OLD_NAME, ONE_RECORD.OLD_GROUP_ID);
            END IF;
        END LOOP;
    EXECUTE IMMEDIATE 'ALTER TRIGGER STUDENTS_INSERT ENABLE';
    EXECUTE IMMEDIATE 'ALTER TRIGGER STUDENTS_LOGS ENABLE';
END RESTORE_STUDENTS_BY_LOGS;

CREATE OR REPLACE TRIGGER CONTROL_VALUES_IN_GROUPS
    BEFORE INSERT OR DELETE OR UPDATE
    ON STUDENTS
    FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    IF INSERTING THEN
        UPDATE GROUPS SET C_VAL = C_VAL + 1 WHERE ID = :NEW.GROUP_ID;
    ELSIF UPDATING THEN
        IF :OLD.GROUP_ID != :NEW.GROUP_ID THEN
            UPDATE GROUPS SET C_VAL = C_VAL + 1 WHERE ID = :NEW.GROUP_ID;
            UPDATE GROUPS SET C_VAL = C_VAL - 1 WHERE ID = :OLD.GROUP_ID;
        END IF;
    ELSIF DELETING THEN
        UPDATE GROUPS SET C_VAL = C_VAL - 1 WHERE ID = :OLD.GROUP_ID;
    END IF;
    COMMIT;
END CONTROL_VALUES_IN_GROUPS;