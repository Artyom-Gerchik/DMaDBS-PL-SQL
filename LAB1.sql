CREATE TABLE MyTable
( id number NOT NULL,
  val number NOT NULL
);

DECLARE
    counter NUMBER := 0;
BEGIN
    LOOP
        counter := counter + 1;
        IF counter > 10 THEN
            EXIT;
        END IF;
        INSERT INTO MyTable VALUES (counter, DBMS_RANDOM.RANDOM);
    END LOOP;
END;

CREATE OR REPLACE FUNCTION MyFunction RETURN VARCHAR2 IS
    EVEN NUMBER := 0;
    ODD NUMBER := 0;
    REMAINDER NUMBER;
    COUNTER NUMBER := 0;
    TMPVAL NUMBER;
    BORDER NUMBER;
BEGIN
    SELECT COUNT(*) INTO BORDER FROM MYTABLE;
    LOOP
        COUNTER := COUNTER + 1;
        IF COUNTER > BORDER THEN
            EXIT;
        END IF;
            SELECT val INTO TMPVAL FROM MyTable WHERE id = COUNTER;
            REMAINDER := MOD(TMPVAL, 2);
            IF REMAINDER = 0 THEN
                EVEN := EVEN + 1;
            ELSE
                ODD := ODD + 1;
            END IF;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE(EVEN);
    DBMS_OUTPUT.PUT_LINE(ODD);

    IF EVEN > ODD THEN
        RETURN 'TRUE';
        DBMS_OUTPUT.PUT_LINE('TRUE');
    ELSIF EVEN < ODD THEN
        RETURN 'FALSE';
        DBMS_OUTPUT.PUT_LINE('FALSE');
    ELSIF EVEN = ODD THEN
        RETURN 'EQUAL';
        DBMS_OUTPUT.PUT_LINE('EQUAL');
    END IF;

    RETURN 'CHTO-TO NE TAK';
END MyFunction;

CREATE OR REPLACE FUNCTION CHECK_ID(ID_TO_CHECK NUMBER) RETURN BOOLEAN IS
    ID_EXISTS NUMBER;
BEGIN
    SELECT COUNT(*) INTO ID_EXISTS FROM MyTable WHERE ID = ID_TO_CHECK;
    IF ID_EXISTS = 1 THEN RETURN TRUE;
        ELSE RETURN FALSE;
    END IF;
END CHECK_ID;

DECLARE
    BEGIN
        DBMS_OUTPUT.PUT_LINE(MyFunction());
    END;

CREATE OR REPLACE FUNCTION GENERATE_INSERT(ID_TO_INSERT IN NUMBER) RETURN VARCHAR2 IS
    VALUE NUMBER;
    BEGIN
        IF CHECK_ID(ID_TO_INSERT) THEN
            SELECT VAL INTO VALUE FROM MYTABLE WHERE ID = ID_TO_INSERT;
            RETURN CONCAT(CONCAT(CONCAT(CONCAT('INSERT INTO MyTable VALUES(', TO_CHAR(ID_TO_INSERT)),', '), TO_CHAR(VALUE)),');');
        END IF;
        RETURN 'ASHIBKA';
    END;

DECLARE
    BEGIN
        DBMS_OUTPUT.PUT_LINE((GENERATE_INSERT(10)));
    END;

CREATE OR REPLACE PROCEDURE INSERT_PROCEDURE(ID NUMBER, VAL NUMBER) IS
    BEGIN
        INSERT INTO MYTABLE VALUES (ID, VAL);
    END;

CREATE OR REPLACE PROCEDURE UPDATE_PROCEDURE(ID_TO_UPDATE NUMBER, NEW_VAL NUMBER) IS
    BEGIN
        IF CHECK_ID(ID_TO_UPDATE) THEN
        UPDATE MYTABLE
            SET VAL = NEW_VAL
        WHERE ID = ID_TO_UPDATE;
        ELSE
            DBMS_OUTPUT.PUT_LINE('NO SUCH ID');
        END IF;
    END;

CREATE OR REPLACE PROCEDURE DELETE_PROCEDURE(ID_TO_DELETE NUMBER) IS
    BEGIN
        IF CHECK_ID(ID_TO_DELETE) THEN
            DELETE FROM MyTable WHERE ID = ID_TO_DELETE;
        ELSE
            DBMS_OUTPUT.PUT_LINE('NO SUCH ID');
        END IF;
    END;

DECLARE
    BEGIN
        INSERT_PROCEDURE(22222, 321);
    END;

DECLARE
    BEGIN
        UPDATE_PROCEDURE(22222, 999);
    END;

DECLARE
    BEGIN
        DELETE_PROCEDURE(22222);
    END;

SELECT COUNT(*) FROM MyTable;

CREATE OR REPLACE FUNCTION EXTRA_MONEY(MONTH_SALARY VARCHAR2, PERCENT VARCHAR2) RETURN NUMBER IS
    TOTAL_EXTRA_MONEY NUMBER;
    RIGHT_PERCENT FLOAT;
BEGIN
    IF REGEXP_LIKE(MONTH_SALARY, '^[0-9]+$') THEN
        IF REGEXP_LIKE(PERCENT,'^[0-9]+$') THEN
            IF (TO_NUMBER(PERCENT) > 100 OR TO_NUMBER(PERCENT) < 0)  THEN
                DBMS_OUTPUT.PUT_LINE('PERCENT IS GREATER THAN 100 OR LESS THAN 0');
                RETURN 0;
            END IF;
            RIGHT_PERCENT := TO_NUMBER(PERCENT) / 100;
            TOTAL_EXTRA_MONEY := (1 + RIGHT_PERCENT) * 12 * TO_NUMBER(MONTH_SALARY);
        END IF;
    END IF;

    RETURN TOTAL_EXTRA_MONEY;
END;

DECLARE
    BEGIN
        DBMS_OUTPUT.PUT_LINE(EXTRA_MONEY('1000', '30'));
END;


DROP TABLE MyTable;

SELECT * FROM MyTable;

