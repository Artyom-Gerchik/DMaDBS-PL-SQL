CREATE OR REPLACE PROCEDURE CHECK_TABLES(DEV_SCHEMA_NAME VARCHAR2, PROD_SCHEMA_NAME VARCHAR2) IS
    CURSOR TABLE_NAMES IS
        SELECT *
        FROM (SELECT TABLE_NAME DEVELOPER_TABLE_NAME FROM ALL_TABLES WHERE OWNER = UPPER(DEV_SCHEMA_NAME)) DEVELEPOER
                 FULL OUTER JOIN
             (SELECT TABLE_NAME PRODUCTOR_TABLE_NAME FROM ALL_TABLES WHERE OWNER = UPPER(PROD_SCHEMA_NAME)) PRODUCTOR
             ON DEVELEPOER.DEVELOPER_TABLE_NAME = PRODUCTOR.PRODUCTOR_TABLE_NAME;
BEGIN

    FOR RECORD IN TABLE_NAMES
        LOOP
            IF RECORD.PRODUCTOR_TABLE_NAME IS NULL THEN
                DBMS_OUTPUT.PUT_LINE('NO SUCH TABLE AS # ' || RECORD.DEVELOPER_TABLE_NAME || ' # IN PRODUCTOR SCHEME');
                CONTINUE;
            END IF;
            CHECK_TABLES_STRUCTURE(DEV_SCHEMA_NAME, PROD_SCHEMA_NAME, RECORD.DEVELOPER_TABLE_NAME);
            CHECK_TABLES_STRUCTURE_CONSTRAINTS(DEV_SCHEMA_NAME, PROD_SCHEMA_NAME, RECORD.DEVELOPER_TABLE_NAME);

            --             IF RECORD.DEVELOPER_TABLE_NAME IS NULL THEN
--                 DBMS_OUTPUT.PUT('NEED TO EXECUTE IN PRODUCTOR SCHEME: ');
--                 DBMS_OUTPUT.PUT_LINE('DROP TABLE ' || RECORD.PRODUCTOR_TABLE_NAME || ';');
--                 CONTINUE;
--             END IF;


        END LOOP;

END CHECK_TABLES;

CREATE OR REPLACE PROCEDURE CHECK_TABLES_STRUCTURE(DEV_SCHEMA_NAME VARCHAR2, PROD_SCHEMA_NAME VARCHAR2,
                                                   TABLE_NAME_TO_CHECK VARCHAR2) IS
    CURSOR TABLE_COLUMNS IS
        SELECT *
        FROM ((SELECT COLUMN_NAME DEVELOPER_COLUMN_NAME
               FROM ALL_TAB_COLUMNS
               WHERE OWNER = UPPER(DEV_SCHEMA_NAME)
                 AND TABLE_NAME = UPPER(TABLE_NAME_TO_CHECK))) DEVELOPER
                 FULL OUTER JOIN
             (SELECT COLUMN_NAME PRODUCTOR_COLUMN_NAME
              FROM ALL_TAB_COLUMNS
              WHERE OWNER = UPPER(PROD_SCHEMA_NAME)
                AND TABLE_NAME = UPPER(TABLE_NAME_TO_CHECK)) PRODUCTOR
             ON DEVELOPER.DEVELOPER_COLUMN_NAME = PRODUCTOR.PRODUCTOR_COLUMN_NAME;
BEGIN
    FOR RECORD IN TABLE_COLUMNS
        LOOP
            IF RECORD.DEVELOPER_COLUMN_NAME IS NULL THEN
                DBMS_OUTPUT.PUT_LINE('NO SUCH COLUMN AS # ' || RECORD.PRODUCTOR_COLUMN_NAME || ' # IN TABLE ' ||
                                     TABLE_NAME_TO_CHECK || ' IN DEVELOPER SCHEME');
                CONTINUE;
            END IF;
            IF RECORD.PRODUCTOR_COLUMN_NAME IS NULL THEN
                DBMS_OUTPUT.PUT_LINE('NO SUCH COLUMN AS # ' || RECORD.DEVELOPER_COLUMN_NAME || ' # IN TABLE ' ||
                                     TABLE_NAME_TO_CHECK || ' IN PRODUCTOR SCHEME');
                CONTINUE;
            END IF;
            CHECK_TABLES_STRUCTURE_DATA_TYPES(DEV_SCHEMA_NAME, PROD_SCHEMA_NAME, RECORD.DEVELOPER_COLUMN_NAME,
                                              TABLE_NAME_TO_CHECK);
        END LOOP;
END CHECK_TABLES_STRUCTURE;

CREATE OR REPLACE PROCEDURE CHECK_TABLES_STRUCTURE_DATA_TYPES(DEV_SCHEMA_NAME VARCHAR2, PROD_SCHEMA_NAME VARCHAR2,
                                                              COLUMN_NAME_TO_CHECK VARCHAR2,
                                                              TABLE_NAME_FOR_OUTPUT VARCHAR2) IS
    TMP NUMBER;
    CURSOR COLUMN_DATA_TYPES IS
        SELECT *
        FROM ((SELECT DATA_TYPE DEVELOPER_COLUMN_DATA_TYPE
               FROM ALL_TAB_COLUMNS
               WHERE OWNER = UPPER(DEV_SCHEMA_NAME)
                 AND COLUMN_NAME = UPPER(COLUMN_NAME_TO_CHECK))) DEVELOPER
                 FULL OUTER JOIN
             (SELECT DATA_TYPE PRODUCTOR_COLUMN_DATA_TYPE
              FROM ALL_TAB_COLUMNS
              WHERE OWNER = UPPER(PROD_SCHEMA_NAME)
                AND COLUMN_NAME = UPPER(COLUMN_NAME_TO_CHECK)) PRODUCTOR
             ON DEVELOPER.DEVELOPER_COLUMN_DATA_TYPE = PRODUCTOR.PRODUCTOR_COLUMN_DATA_TYPE;
BEGIN
    FOR RECORD IN COLUMN_DATA_TYPES
        LOOP
            IF RECORD.PRODUCTOR_COLUMN_DATA_TYPE = RECORD.DEVELOPER_COLUMN_DATA_TYPE THEN
                CONTINUE;
            ELSE
                IF TMP = 1 THEN
                    TMP := 9999;
                    CONTINUE;
                END IF;
                DBMS_OUTPUT.PUT_LINE('MISMATCH OF DATA TYPE IN # ' || COLUMN_NAME_TO_CHECK || ' # IN ' || TABLE_NAME_FOR_OUTPUT || ' TABLE');
                TMP := 1;
            END IF;
        END LOOP;
END CHECK_TABLES_STRUCTURE_DATA_TYPES;

CREATE OR REPLACE PROCEDURE CHECK_TABLES_STRUCTURE_CONSTRAINTS(DEV_SCHEMA_NAME VARCHAR2, PROD_SCHEMA_NAME VARCHAR2,
                                                               TABLE_NAME_TO_CHECK VARCHAR2) IS
    TMP NUMBER;
    CURSOR TABLE_CONSTRAINTS_NAMES IS
        SELECT *
        FROM (SELECT CONSTRAINT_NAME DEVELOPER_CONSTRAINT_NAME
              FROM ALL_CONSTRAINTS
              WHERE OWNER = UPPER(DEV_SCHEMA_NAME)
                AND TABLE_NAME = UPPER(TABLE_NAME_TO_CHECK)
                AND NOT REGEXP_LIKE(CONSTRAINT_NAME, '^SYS_C\d+')) DEVELOPER
                 FULL OUTER JOIN
             (SELECT CONSTRAINT_NAME PRODUCTOR_CONSTRAINT_NAME
              FROM ALL_CONSTRAINTS
              WHERE OWNER = UPPER(PROD_SCHEMA_NAME)
                AND TABLE_NAME = UPPER(TABLE_NAME_TO_CHECK)
                AND NOT REGEXP_LIKE(CONSTRAINT_NAME, '^SYS_C\d+')) PRODUCTOR
             ON DEVELOPER.DEVELOPER_CONSTRAINT_NAME = PRODUCTOR.PRODUCTOR_CONSTRAINT_NAME;
BEGIN
    FOR RECORD IN TABLE_CONSTRAINTS_NAMES
        LOOP
            IF RECORD.PRODUCTOR_CONSTRAINT_NAME = RECORD.DEVELOPER_CONSTRAINT_NAME THEN
                CONTINUE;
            ELSE
                IF TMP = 1 THEN
                    TMP := 9999;
                    CONTINUE;
                END IF;
                DBMS_OUTPUT.PUT_LINE('MISMATCH OF CONSTRAINT IN # ' || TABLE_NAME_TO_CHECK || ' #');
                TMP := 1;
            END IF;
        END LOOP;
END CHECK_TABLES_STRUCTURE_CONSTRAINTS;


CREATE OR REPLACE PROCEDURE CHECK_SCHEMAS(DEV_SCHEMA_NAME VARCHAR2, PROD_SCHEMA_NAME VARCHAR2) IS
BEGIN
    CHECK_TABLES('DEVELOPER', 'PRODUCTOR');
END;

BEGIN
    CHECK_SCHEMAS('DEVELOPER', 'PRODUCTOR');
END;